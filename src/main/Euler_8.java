package main;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * NO.8
 * 以下の1000桁の数字から5つの連続する数字を取り出して その積を計算する. 
 * そのような積の中で最大のものの値はいくらか.
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 * EX 6桁の数123789なら, 1*2*3*7*8と2*3*7*8*9の二通りとなり, 
 * 後者の2*3*7*8*9＝3024が最大の積となる. *
 */
public class Euler_8 {
	
	public static void main(String[] args) {
		BigDecimal bigDecimal = new BigDecimal(
			   "73167176531330624919225119674426574742355349194934"
			 + "96983520312774506326239578318016984801869478851843"
			 + "85861560789112949495459501737958331952853208805511"
			 + "12540698747158523863050715693290963295227443043557"
			 + "66896648950445244523161731856403098711121722383113"
			 + "62229893423380308135336276614282806444486645238749"
			 + "30358907296290491560440772390713810515859307960866"
			 + "70172427121883998797908792274921901699720888093776"
			 + "65727333001053367881220235421809751254540594752243"
			 + "52584907711670556013604839586446706324415722155397"
			 + "53697817977846174064955149290862569321978468622482"
			 + "83972241375657056057490261407972968652414535100474"
			 + "82166370484403199890008895243450658541227588666881"
			 + "16427171479924442928230863465674813919123162824586"
			 + "17866458359124566529476545682848912883142607690042"
			 + "24219022671055626321111109370544217506941658960408"
			 + "07198403850962455444362981230987879927244284909188"
			 + "84580156166097919133875499200524063689912560717606"
			 + "05886116467109405077541002256983155200055935729725"
			 + "71636269561882670428252483600823257530420752963450"
		);
		System.out.println("" + Euler_8.maxOfNumOfDesits(bigDecimal, 5));
	}

	public static int _sumofarrays(BigDecimal bigDecimal) {
		// FIXME: 変換コストがきになるーToT
		int first = 0, second = 0, third = 0, fourth = 0, fifth = 0;
		String bigDecimalStr = bigDecimal.toString();
		try {
			//本当は桁数を考慮した作りにすべきですよん
		first = Integer.parseInt("" + bigDecimalStr.charAt(0));
		second= Integer.parseInt("" + bigDecimalStr.charAt(1));
		third = Integer.parseInt("" + bigDecimalStr.charAt(2));
		fourth = Integer.parseInt("" + bigDecimalStr.charAt(3));
		fifth = Integer.parseInt("" + bigDecimalStr.charAt(4));
		} catch (Exception e) {
		}
		return first * second * third * fourth * fifth;
	}

	public static int _maxofBigNumArrayList(List<BigDecimal> list) {
		
		for (int i = 0; i < list.size(); i++) {
			list.set(i, new BigDecimal(_sumofarrays(list.get(i))));
		}
		
		Collections.sort(list);
		return list.get(list.size() - 1).intValue();
	}

	public static int maxOfNumOfDesits(BigDecimal bigDecimal, int num) {
		List list = _getNumOfDesitsList(bigDecimal, num);
		return _maxofBigNumArrayList(list);
	}

	public static List<BigDecimal> _getNumOfDesitsList(BigDecimal bigDecimal, int i) {
		List<BigDecimal> resultList = new ArrayList<BigDecimal>();
// -4の考え方
//		6桁 - 2種類 = 4
//		7桁 - 3種類 = 4
//		8桁 - 4種類 = 4
//		9桁 - 5種類 = 4
//		10桁 - 6種類 = 4
		String bigDecimalStr = bigDecimal.toString();
		for(int n = 0; n < bigDecimal.toString().length() - 4; n++) {
			try {
				resultList.add(new BigDecimal(bigDecimalStr.substring(n, n + i)));
			} catch(StringIndexOutOfBoundsException e) {
				break;
			}
		}
		
		return resultList;
	}

}
