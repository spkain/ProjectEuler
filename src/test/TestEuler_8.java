package test;

import junit.framework.TestCase;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import main.Euler_8;

public class TestEuler_8 extends TestCase {

	public void testBigDecimalの使い方を調べてみるテスト() {
		BigDecimal b = new BigDecimal("10000");
		BigDecimal b2= new BigDecimal("5613567418" + 
				"7510370229" + 
				"2791353839" + 
				"9837606109" + 
				"1512356585" + 
				"7517032850" + 
				"0610848569" + 
				"5738006848" + 
				"8825414979" + 
				"8587961759");
		BigDecimal b3= new BigDecimal("1322862486531088847692058929894520439511523319241229840213158633851070406991514771985065530292194069" + 
"5964507629623156319957022450287645537246955186568396485220998067596426665305143425556016544584354912" + 
"0295419283747622697055715908374865388068781807401424936942712883100243182200808261724358929568818926" + 
"4113309967167849331065866784211078039987200675476345526028454012268718278551200392802215891731740879" + 
"9805104630990951363698700899345871007542920414275312566813901867798985666642087360916100724374983844" + 
"2165236477028389934081973884287251318009748003416399618915783561702801099928558024657688379592686390" + 
"2614112545219541623891113046285733026295390791127327400688010175264761394294832873021676635764443719" + 
"9628619059330787503972797851928322714193886852775058233218023182520661954978318584624048897019698088" + 
"4928729371912357662586599261337021793434684292547346033819774764508004453732254603695664599002532317" + 
"4341728459420353276170540628806337339058690311841764623208209667039671756167166512118308175249064062"
);

// javaで利用する為のてきとーな文字列（ソース）吐き出し用
//		for (int i = 0; i < 10; i++) {
//			System.out.print("\"");
//			for (int j = 0; j < 100; j++) {
//				Random r = new Random();
//				System.out.print(r.nextInt(10));
//			}
//			System.out.print("\" + ");
//			System.out.println("");
//		}
		
		assertEquals(10000, b.intValue());
		assertEquals("5613567418" + 
		"7510370229" + 
		"2791353839" + 
		"9837606109" + 
		"1512356585" + 
		"7517032850" + 
		"0610848569" + 
		"5738006848" + 
		"8825414979" + 
		"8587961759", b2.toString());
		
		assertEquals("1322862486531088847692058929894520439511523319241229840213158633851070406991514771985065530292194069" + 
		"5964507629623156319957022450287645537246955186568396485220998067596426665305143425556016544584354912" + 
		"0295419283747622697055715908374865388068781807401424936942712883100243182200808261724358929568818926" + 
		"4113309967167849331065866784211078039987200675476345526028454012268718278551200392802215891731740879" + 
		"9805104630990951363698700899345871007542920414275312566813901867798985666642087360916100724374983844" + 
		"2165236477028389934081973884287251318009748003416399618915783561702801099928558024657688379592686390" + 
		"2614112545219541623891113046285733026295390791127327400688010175264761394294832873021676635764443719" + 
		"9628619059330787503972797851928322714193886852775058233218023182520661954978318584624048897019698088" + 
		"4928729371912357662586599261337021793434684292547346033819774764508004453732254603695664599002532317" + 
		"4341728459420353276170540628806337339058690311841764623208209667039671756167166512118308175249064062", 
		b3.toString());
	}
	
	public void testsubstring6桁の数字から5桁抜き出せるのかな() {
		BigDecimal b = new BigDecimal("123789");
		assertEquals("12378", b.toString().substring(0, 5));
		assertEquals("23789", b.toString().substring(1, "123789".length()));
	}
	
	public void test15から5を取り出せること() {
		assertEquals("1", "" + new BigDecimal("15").toString().charAt(0));
		assertEquals("5", "" + new BigDecimal("15").toString().charAt(1));
	}
	
	public void test6桁の数字123789のとき５桁の組み合わせで最大が3024であること() {
		assertEquals(3024, Euler_8.maxOfNumOfDesits(new BigDecimal("123789"), 5));
	}
	// TODO: BigDecimalと、桁数を指定すると、組み合わせで抜き出したリストがとれるメソッド
	public void test6桁の数字123789のとき5桁の組み合わせでリストが2つとれること() {
		List<BigDecimal> expectedList = new ArrayList<BigDecimal>();
		expectedList.add(new BigDecimal("12378"));
		expectedList.add(new BigDecimal("23789"));
		assertEquals(expectedList, Euler_8._getNumOfDesitsList(new BigDecimal("123789"), 5));
	}
	
	public void test6桁の数字103112のとき5桁の組み合わせのとき6であること() {
		assertEquals(0, Euler_8.maxOfNumOfDesits(new BigDecimal(103112), 5));
	}
	
	// TODO: 渡された数字の各桁数の積を求めて返すメソッド
	public void test5桁の数字が11111だったときに1であること() {
		assertEquals(1, Euler_8._sumofarrays(new BigDecimal(11111)));
	}

	public void test5桁の数字が12345だったとき120であること() {
		assertEquals(120, Euler_8._sumofarrays(new BigDecimal(12345)));
	}
	
	// TODO: 積の合計値のリストから最大を求めるメソッド？
	public void test11111と12345と22222だったとき120が最大であること() {
		List<BigDecimal> list = new ArrayList<BigDecimal>();
		list.add(new BigDecimal("11111"));
		list.add(new BigDecimal("12345"));
		list.add(new BigDecimal("22222"));
		assertEquals(120, Euler_8._maxofBigNumArrayList(list));
	}
	
	public void test1と120と32のリストをソートすると120と32と1の順番であること() {
		List<BigDecimal> list = new ArrayList<BigDecimal>();
		list.add(new BigDecimal("1"));
		list.add(new BigDecimal("120"));
		list.add(new BigDecimal("32"));
		Collections.sort(list);
		assertEquals(120, list.get(list.size() - 1).intValue());
	}
}
